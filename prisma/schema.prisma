generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String  @id @default(cuid())
  name       String?
  email      String? @unique
  password   String?
  image      String?
  providerId String? @unique
  active     Boolean @default(false)

  activateTokens      ActivateToken[]
  passwordResetTokens PasswordResetToken[]
  workouts            Workout[]
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  userId      String
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    String
  token     String    @unique
  resetAt   DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Workout {
  id        String   @id @default(cuid())
  userId    String
  content   String
  createdAt DateTime @default(now())

  exercises Exercise[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Exercise {
  id        String   @id @default(cuid())
  workoutId String
  name      String
  createdAt DateTime @default(now())

  sets ExerciseSet[]

  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([workoutId])
}

model ExerciseSet {
  id          String   @id @default(cuid())
  exerciseId  String
  reps        String?
  weight      String?
  timehrs     String?
  timemins    String?
  timeseconds String?
  createdAt   DateTime @default(now())

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
}
